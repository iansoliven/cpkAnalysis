from __future__ import annotations

import sys
from pathlib import Path
from typing import Dict, Sequence

try:  # pragma: no cover - stdlib name in 3.11+
    import tomllib  # type: ignore[attr-defined]
except ModuleNotFoundError:  # pragma: no cover - fallback for <3.11
    tomllib = None  # type: ignore[assignment]

from .models import PluginConfig

PROFILE_FILENAME = "post_processing_profile.toml"


def load_plugin_profile(path: Path) -> Dict[str, PluginConfig]:
    """Load plugin selections from a TOML profile."""
    configs: Dict[str, PluginConfig] = {}
    if tomllib is None or not path.exists():
        return configs
    try:
        text = path.read_text(encoding="utf-8")
    except OSError as exc:
        print(f"Warning: failed to read plugin profile {path}: {exc}. Using defaults.", file=sys.stderr)
        return configs
    decode_error = getattr(tomllib, "TOMLDecodeError", ValueError)
    try:
        data = tomllib.loads(text)
    except (decode_error, TypeError) as exc:
        print(
            f"Warning: failed to parse plugin profile {path}: {exc}. Using defaults.",
            file=sys.stderr,
        )
        return configs
    for entry in data.get("plugins", []):
        plugin_id = entry.get("id")
        if not plugin_id:
            continue
        enabled = bool(entry.get("enabled", True))
        priority_raw = entry.get("priority")
        try:
            priority = int(priority_raw) if priority_raw is not None else None
        except (TypeError, ValueError):
            priority = None
        parameters = entry.get("parameters", {})
        if not isinstance(parameters, dict):
            parameters = {}
        configs[plugin_id] = PluginConfig(
            plugin_id=plugin_id,
            enabled=enabled,
            priority=priority,
            parameters={str(key): value for key, value in parameters.items()},
        )
    return configs


def save_plugin_profile(path: Path, configs: Sequence[PluginConfig]) -> None:
    """Persist plugin selections to a TOML profile."""
    try:
        path.parent.mkdir(parents=True, exist_ok=True)
        lines = ["# Generated by CPKAnalysis tooling", ""]
        if not configs:
            lines.append("# No plugins configured")
        for cfg in configs:
            lines.append("[[plugins]]")
            lines.append(f'id = "{cfg.plugin_id}"')
            lines.append(f"enabled = {'true' if cfg.enabled else 'false'}")
            if cfg.priority is not None:
                lines.append(f"priority = {int(cfg.priority)}")
            if cfg.parameters:
                params_str = ", ".join(
                    f'"{_escape_toml_value(str(key))}" = "{_escape_toml_value(str(value))}"'
                    for key, value in cfg.parameters.items()
                )
                lines.append(f"parameters = {{ {params_str} }}")
            lines.append("")
        content = "\n".join(lines).strip() + "\n"
        path.write_text(content, encoding="utf-8")
    except OSError as exc:
        print(f"Warning: failed to write plugin profile {path}: {exc}.", file=sys.stderr)
        return


def _escape_toml_value(value: str) -> str:
    return value.replace("\\", "\\\\").replace('"', '\\"')
